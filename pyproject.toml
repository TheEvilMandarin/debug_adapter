[tool.poetry]
name = "debug_adapter"
version = "0.1"
description = ""
authors = []
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.10"
pygdbmi = "0.11.0.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.6.0"
mypy = "^1.11.0"
pylint = "^3.3.6"
pre-commit = "^3.8.0"
pytest = "^8.2.2"
poethepoet = "^0.27.0"
bandit = "^1.7.9"
flake8 = "^7.1.1"
wemake-python-styleguide = "^1.0.0"

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
extend-select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "I",   # isort
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PGH", # pygrep
    "RUF", # ruff checks
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "PL", # pylint
    "G", # flake8-logging-format
    "F", # pyflakes
    "E", "W", # pycodestyle
]
fixable = ["ALL"] # include to autofixing
ignore = ["RUF100", "I001"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
combine-as-imports = true
force-single-line = false
lines-between-types = 1
lines-after-imports = 2

[tool.mypy]
files = ["src/**/*.py"]

[tool.pylint.classes]
max-attributes = 15

[tool.pylint.messages_control]
disable = ["W0511", "C0413", "C0412", "R0903"]

[tool.bandit]
exclude_dirs = [".venv", "node_modules", ".vendor"]
skips = ["B101"]

[tool.pytest.ini_options]
pythonpath = "."
addopts = "--import-mode=importlib -Werror -v"
filterwarnings = "error"

[tool.poe.tasks]
poetry-check = "poetry check"
cspell-install = "npm install cspell@8.14.4 @cspell/dict-ru_ru@2.2.1"
cspell-run = "npm exec -c 'cspell \"test/**/*.py\" \"src/**/*.py\"'"
cspell = ["cspell-install", "cspell-run"]
ruff = "ruff check"
ruff-format = "ruff format --check"
mypy = "mypy"
bandit = "bandit -c pyproject.toml -r ."
flake8 = "flake8"
pylint = "pylint src"
pytest-small = "pytest tests/small"
pytest-big = "pytest tests/big"
pytest = ["pytest-small", "pytest-big"]
check.sequence = ["poetry-check", "cspell", "ruff", "mypy", "bandit", "flake8", "pylint", "pytest"]
check.ignore_fail = "return_non_zero"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
